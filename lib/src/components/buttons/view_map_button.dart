import 'package:bem/src/components/decorations/decorations.dart';
import 'package:bem/src/components/spaces/widget_space.dart';
import 'package:bem/src/constants/app_color.dart';
import 'package:bem/src/constants/sizes.dart';
import 'package:bem/src/constants/text_strings.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

class ViewMapButton extends StatefulWidget {
  final VoidCallback onClick;

  /// Creates a new ViewMapButton. #onClick ( View ) will be called when the button is clicked.
  ///
  ///
  /// @return The newly created ViewMapButton state object. Never null but may be used to chain calls to this method
  const ViewMapButton({super.key, required this.onClick});

  @override
  State<ViewMapButton> createState() => _ViewMapButtonState();
}

class _ViewMapButtonState extends State<ViewMapButton> {
  MapController controller = Get.put(MapController());

  /// Builds the GestureDetector widget. This is called by the build method and should not be called directly by the user.dart.
  ///
  /// @param context - the context of the build. Not used.
  ///
  /// @return the GestureDetector widget to be used by the map toolkit or null if none could be created
  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        controller.onMapButtonPress();
        widget.onClick();
      },
      child: Container(
        alignment: Alignment.center,
        width: 150,
        padding: const EdgeInsets.fromLTRB(10, 8, 10, 8),
        margin: const EdgeInsets.only(top: 12),
        decoration: documentBorder(radius: 8),
        child: Obx(() => Row(
              children: [
                Image(
                  image: AssetImage(controller.imageUrl.value),
                  height: 28,
                  width: 28,
                ),
                addHorizontalSpace(8),
                Text(controller.title.value,
                    style: const TextStyle(
                      fontSize: fontSize16,
                      fontFamily: 'Montserrat',
                      fontWeight: FontWeight.w500,
                      color: color3A71FF,
                    )),
              ],
            )),
      ),
    );
  }
}

// This method generates the skeleton for the map view. The URL of the map view is generated by #generateUrl ( String String )
class MapController extends GetxController {
  RxString imageUrl = 'assets/images/map_view.png'.obs;
  RxString title = viewMap.obs;
  Rx<MapViewType> mapViewType = Rx<MapViewType>(MapViewType.map);

  onMapButtonPress() {
    // Set the map view type.
    if (mapViewType.value == MapViewType.map) {
      imageUrl.value = 'assets/images/map_view.png';
      title.value = viewMap;
      mapViewType.value = MapViewType.list;
    } else {
      // Set the mapViewType to mapViewType. value MapViewType. list
      if (mapViewType.value == MapViewType.list) {
        imageUrl.value = 'assets/images/list.png';
        title.value = viewList;
        mapViewType.value = MapViewType.map;
      }
    }
  }
}

enum MapViewType { map, list }
